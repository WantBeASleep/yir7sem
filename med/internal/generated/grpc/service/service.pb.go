// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v3.12.4
// source: service.proto

package service

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Doctor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Fullname      string                 `protobuf:"bytes,200,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Org           string                 `protobuf:"bytes,300,opt,name=org,proto3" json:"org,omitempty"`
	Job           string                 `protobuf:"bytes,400,opt,name=job,proto3" json:"job,omitempty"`
	Desc          *string                `protobuf:"bytes,500,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Doctor) Reset() {
	*x = Doctor{}
	mi := &file_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Doctor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Doctor) ProtoMessage() {}

func (x *Doctor) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Doctor.ProtoReflect.Descriptor instead.
func (*Doctor) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

func (x *Doctor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Doctor) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *Doctor) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *Doctor) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *Doctor) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

// TODO: ввести entity, переписать тут desc (сделать его опциональным)
type RegisterDoctorIn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Doctor        *Doctor                `protobuf:"bytes,100,opt,name=doctor,proto3" json:"doctor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterDoctorIn) Reset() {
	*x = RegisterDoctorIn{}
	mi := &file_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDoctorIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDoctorIn) ProtoMessage() {}

func (x *RegisterDoctorIn) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDoctorIn.ProtoReflect.Descriptor instead.
func (*RegisterDoctorIn) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterDoctorIn) GetDoctor() *Doctor {
	if x != nil {
		return x.Doctor
	}
	return nil
}

type GetDoctorIn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDoctorIn) Reset() {
	*x = GetDoctorIn{}
	mi := &file_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDoctorIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDoctorIn) ProtoMessage() {}

func (x *GetDoctorIn) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDoctorIn.ProtoReflect.Descriptor instead.
func (*GetDoctorIn) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetDoctorIn) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDoctorOut struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Doctor        *Doctor                `protobuf:"bytes,100,opt,name=doctor,proto3" json:"doctor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDoctorOut) Reset() {
	*x = GetDoctorOut{}
	mi := &file_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDoctorOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDoctorOut) ProtoMessage() {}

func (x *GetDoctorOut) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDoctorOut.ProtoReflect.Descriptor instead.
func (*GetDoctorOut) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetDoctorOut) GetDoctor() *Doctor {
	if x != nil {
		return x.Doctor
	}
	return nil
}

type UpdateDoctorIn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Org           *string                `protobuf:"bytes,300,opt,name=org,proto3,oneof" json:"org,omitempty"`
	Job           *string                `protobuf:"bytes,400,opt,name=job,proto3,oneof" json:"job,omitempty"`
	Desc          *string                `protobuf:"bytes,500,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDoctorIn) Reset() {
	*x = UpdateDoctorIn{}
	mi := &file_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDoctorIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDoctorIn) ProtoMessage() {}

func (x *UpdateDoctorIn) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDoctorIn.ProtoReflect.Descriptor instead.
func (*UpdateDoctorIn) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateDoctorIn) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateDoctorIn) GetOrg() string {
	if x != nil && x.Org != nil {
		return *x.Org
	}
	return ""
}

func (x *UpdateDoctorIn) GetJob() string {
	if x != nil && x.Job != nil {
		return *x.Job
	}
	return ""
}

func (x *UpdateDoctorIn) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

type UpdateDoctorOut struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Doctor        *Doctor                `protobuf:"bytes,100,opt,name=doctor,proto3" json:"doctor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDoctorOut) Reset() {
	*x = UpdateDoctorOut{}
	mi := &file_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDoctorOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDoctorOut) ProtoMessage() {}

func (x *UpdateDoctorOut) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDoctorOut.ProtoReflect.Descriptor instead.
func (*UpdateDoctorOut) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateDoctorOut) GetDoctor() *Doctor {
	if x != nil {
		return x.Doctor
	}
	return nil
}

type Patient struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	Fullname      string                 `protobuf:"bytes,200,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Email         string                 `protobuf:"bytes,300,opt,name=email,proto3" json:"email,omitempty"`
	Policy        string                 `protobuf:"bytes,400,opt,name=policy,proto3" json:"policy,omitempty"`
	Active        bool                   `protobuf:"varint,500,opt,name=active,proto3" json:"active,omitempty"`
	Malignancy    bool                   `protobuf:"varint,600,opt,name=malignancy,proto3" json:"malignancy,omitempty"`
	LastUziDate   *timestamp.Timestamp   `protobuf:"bytes,700,opt,name=last_uzi_date,json=lastUziDate,proto3,oneof" json:"last_uzi_date,omitempty"`
	Birthdate     *timestamp.Timestamp   `protobuf:"bytes,800,opt,name=birthdate,proto3,oneof" json:"birthdate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Patient) Reset() {
	*x = Patient{}
	mi := &file_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Patient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patient) ProtoMessage() {}

func (x *Patient) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patient.ProtoReflect.Descriptor instead.
func (*Patient) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

func (x *Patient) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Patient) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *Patient) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Patient) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *Patient) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Patient) GetMalignancy() bool {
	if x != nil {
		return x.Malignancy
	}
	return false
}

func (x *Patient) GetLastUziDate() *timestamp.Timestamp {
	if x != nil {
		return x.LastUziDate
	}
	return nil
}

func (x *Patient) GetBirthdate() *timestamp.Timestamp {
	if x != nil {
		return x.Birthdate
	}
	return nil
}

type CreatePatientIn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fullname      string                 `protobuf:"bytes,200,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Email         string                 `protobuf:"bytes,300,opt,name=email,proto3" json:"email,omitempty"`
	Policy        string                 `protobuf:"bytes,400,opt,name=policy,proto3" json:"policy,omitempty"`
	Active        bool                   `protobuf:"varint,500,opt,name=active,proto3" json:"active,omitempty"`
	Malignancy    bool                   `protobuf:"varint,600,opt,name=malignancy,proto3" json:"malignancy,omitempty"`
	Birthdate     *timestamp.Timestamp   `protobuf:"bytes,800,opt,name=birthdate,proto3,oneof" json:"birthdate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePatientIn) Reset() {
	*x = CreatePatientIn{}
	mi := &file_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePatientIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePatientIn) ProtoMessage() {}

func (x *CreatePatientIn) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePatientIn.ProtoReflect.Descriptor instead.
func (*CreatePatientIn) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

func (x *CreatePatientIn) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *CreatePatientIn) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreatePatientIn) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *CreatePatientIn) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *CreatePatientIn) GetMalignancy() bool {
	if x != nil {
		return x.Malignancy
	}
	return false
}

func (x *CreatePatientIn) GetBirthdate() *timestamp.Timestamp {
	if x != nil {
		return x.Birthdate
	}
	return nil
}

type CreatePatientOut struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePatientOut) Reset() {
	*x = CreatePatientOut{}
	mi := &file_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePatientOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePatientOut) ProtoMessage() {}

func (x *CreatePatientOut) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePatientOut.ProtoReflect.Descriptor instead.
func (*CreatePatientOut) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

func (x *CreatePatientOut) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPatientIn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPatientIn) Reset() {
	*x = GetPatientIn{}
	mi := &file_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPatientIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPatientIn) ProtoMessage() {}

func (x *GetPatientIn) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPatientIn.ProtoReflect.Descriptor instead.
func (*GetPatientIn) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetPatientIn) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPatientOut struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Patient       *Patient               `protobuf:"bytes,100,opt,name=patient,proto3" json:"patient,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPatientOut) Reset() {
	*x = GetPatientOut{}
	mi := &file_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPatientOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPatientOut) ProtoMessage() {}

func (x *GetPatientOut) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPatientOut.ProtoReflect.Descriptor instead.
func (*GetPatientOut) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetPatientOut) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

type GetDoctorPatientsIn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DoctorId      string                 `protobuf:"bytes,100,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDoctorPatientsIn) Reset() {
	*x = GetDoctorPatientsIn{}
	mi := &file_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDoctorPatientsIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDoctorPatientsIn) ProtoMessage() {}

func (x *GetDoctorPatientsIn) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDoctorPatientsIn.ProtoReflect.Descriptor instead.
func (*GetDoctorPatientsIn) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetDoctorPatientsIn) GetDoctorId() string {
	if x != nil {
		return x.DoctorId
	}
	return ""
}

type GetDoctorPatientsOut struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Patients      []*Patient             `protobuf:"bytes,100,rep,name=patients,proto3" json:"patients,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDoctorPatientsOut) Reset() {
	*x = GetDoctorPatientsOut{}
	mi := &file_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDoctorPatientsOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDoctorPatientsOut) ProtoMessage() {}

func (x *GetDoctorPatientsOut) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDoctorPatientsOut.ProtoReflect.Descriptor instead.
func (*GetDoctorPatientsOut) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetDoctorPatientsOut) GetPatients() []*Patient {
	if x != nil {
		return x.Patients
	}
	return nil
}

// TODO: перевести timestamp в других протиках
type UpdatePatientIn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DoctorId      string                 `protobuf:"bytes,100,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id,omitempty"`
	Id            string                 `protobuf:"bytes,200,opt,name=id,proto3" json:"id,omitempty"`
	Active        *bool                  `protobuf:"varint,300,opt,name=active,proto3,oneof" json:"active,omitempty"`
	Malignancy    *bool                  `protobuf:"varint,400,opt,name=malignancy,proto3,oneof" json:"malignancy,omitempty"`
	LastUziDate   *timestamp.Timestamp   `protobuf:"bytes,500,opt,name=last_uzi_date,json=lastUziDate,proto3,oneof" json:"last_uzi_date,omitempty"`
	Birthdate     *timestamp.Timestamp   `protobuf:"bytes,600,opt,name=birthdate,proto3,oneof" json:"birthdate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePatientIn) Reset() {
	*x = UpdatePatientIn{}
	mi := &file_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePatientIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePatientIn) ProtoMessage() {}

func (x *UpdatePatientIn) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePatientIn.ProtoReflect.Descriptor instead.
func (*UpdatePatientIn) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{13}
}

func (x *UpdatePatientIn) GetDoctorId() string {
	if x != nil {
		return x.DoctorId
	}
	return ""
}

func (x *UpdatePatientIn) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatePatientIn) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *UpdatePatientIn) GetMalignancy() bool {
	if x != nil && x.Malignancy != nil {
		return *x.Malignancy
	}
	return false
}

func (x *UpdatePatientIn) GetLastUziDate() *timestamp.Timestamp {
	if x != nil {
		return x.LastUziDate
	}
	return nil
}

func (x *UpdatePatientIn) GetBirthdate() *timestamp.Timestamp {
	if x != nil {
		return x.Birthdate
	}
	return nil
}

type UpdatePatientOut struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Patient       *Patient               `protobuf:"bytes,100,opt,name=patient,proto3" json:"patient,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePatientOut) Reset() {
	*x = UpdatePatientOut{}
	mi := &file_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePatientOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePatientOut) ProtoMessage() {}

func (x *UpdatePatientOut) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePatientOut.ProtoReflect.Descriptor instead.
func (*UpdatePatientOut) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{14}
}

func (x *UpdatePatientOut) GetPatient() *Patient {
	if x != nil {
		return x.Patient
	}
	return nil
}

type Card struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DoctorId      string                 `protobuf:"bytes,100,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id,omitempty"`
	PatientId     string                 `protobuf:"bytes,200,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	Diagnosis     *string                `protobuf:"bytes,300,opt,name=diagnosis,proto3,oneof" json:"diagnosis,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Card) Reset() {
	*x = Card{}
	mi := &file_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{15}
}

func (x *Card) GetDoctorId() string {
	if x != nil {
		return x.DoctorId
	}
	return ""
}

func (x *Card) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *Card) GetDiagnosis() string {
	if x != nil && x.Diagnosis != nil {
		return *x.Diagnosis
	}
	return ""
}

type CreateCardIn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Card          *Card                  `protobuf:"bytes,100,opt,name=card,proto3" json:"card,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCardIn) Reset() {
	*x = CreateCardIn{}
	mi := &file_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCardIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCardIn) ProtoMessage() {}

func (x *CreateCardIn) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCardIn.ProtoReflect.Descriptor instead.
func (*CreateCardIn) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{16}
}

func (x *CreateCardIn) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type GetCardIn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DoctorId      string                 `protobuf:"bytes,100,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id,omitempty"`
	PatientId     string                 `protobuf:"bytes,200,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCardIn) Reset() {
	*x = GetCardIn{}
	mi := &file_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCardIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardIn) ProtoMessage() {}

func (x *GetCardIn) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardIn.ProtoReflect.Descriptor instead.
func (*GetCardIn) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetCardIn) GetDoctorId() string {
	if x != nil {
		return x.DoctorId
	}
	return ""
}

func (x *GetCardIn) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

type GetCardOut struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Card          *Card                  `protobuf:"bytes,100,opt,name=Card,proto3" json:"Card,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCardOut) Reset() {
	*x = GetCardOut{}
	mi := &file_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCardOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCardOut) ProtoMessage() {}

func (x *GetCardOut) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCardOut.ProtoReflect.Descriptor instead.
func (*GetCardOut) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetCardOut) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type CreateCardOut struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Card          *Card                  `protobuf:"bytes,100,opt,name=card,proto3" json:"card,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCardOut) Reset() {
	*x = CreateCardOut{}
	mi := &file_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCardOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCardOut) ProtoMessage() {}

func (x *CreateCardOut) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCardOut.ProtoReflect.Descriptor instead.
func (*CreateCardOut) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{19}
}

func (x *CreateCardOut) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type UpdateCardIn struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Card          *Card                  `protobuf:"bytes,100,opt,name=card,proto3" json:"card,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCardIn) Reset() {
	*x = UpdateCardIn{}
	mi := &file_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCardIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCardIn) ProtoMessage() {}

func (x *UpdateCardIn) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCardIn.ProtoReflect.Descriptor instead.
func (*UpdateCardIn) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateCardIn) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type UpdateCardOut struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Card          *Card                  `protobuf:"bytes,100,opt,name=card,proto3" json:"card,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCardOut) Reset() {
	*x = UpdateCardOut{}
	mi := &file_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCardOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCardOut) ProtoMessage() {}

func (x *UpdateCardOut) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCardOut.ProtoReflect.Descriptor instead.
func (*UpdateCardOut) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateCardOut) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7e, 0x0a,
	0x06, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0xac, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x11, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x90,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x18, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x22, 0x33, 0x0a,
	0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x12, 0x1f, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x64, 0x6f, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0x1d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x2f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x75,
	0x74, 0x12, 0x1f, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x64, 0x6f, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0xac, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x03, 0x6a, 0x6f, 0x62, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x6a,
	0x6f, 0x62, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0xf4, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x6f, 0x72, 0x67, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6a, 0x6f, 0x62, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x22, 0x32, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x64,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x44, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xc6, 0x02, 0x0a,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0xac,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x17, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0xf4, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f,
	0x0a, 0x0a, 0x6d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x18, 0xd8, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x12,
	0x44, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x7a, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0xbc, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x7a, 0x69, 0x44, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x74, 0x65, 0x18, 0xa0, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x7a, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x74, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75,
	0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0xac, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x17, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1f, 0x0a, 0x0a, 0x6d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x18, 0xd8, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x61, 0x6e, 0x63, 0x79,
	0x12, 0x3e, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x18, 0xa0, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x22, 0x22,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4f,
	0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x1e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x33, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x4f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x32, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x4f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xc3, 0x02, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x0f, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0a, 0x6d, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01,
	0x52, 0x0a, 0x6d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x44, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x7a, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x7a, 0x69, 0x44, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x74, 0x65, 0x18, 0xd8, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x7a, 0x69, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x36, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x4f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x75, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x09,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x22, 0x29,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x12, 0x19,
	0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x48, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x75,
	0x74, 0x12, 0x19, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x43, 0x61, 0x72, 0x64, 0x22, 0x2a, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x19, 0x0a,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x29, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63,
	0x61, 0x72, 0x64, 0x22, 0x2a, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x4f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x32,
	0x83, 0x04, 0x0a, 0x06, 0x4d, 0x65, 0x64, 0x53, 0x72, 0x76, 0x12, 0x3b, 0x0a, 0x0e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x11, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x44, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x0c, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x1a, 0x0d, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x75,
	0x74, 0x12, 0x31, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x0f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x1a, 0x10, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x74, 0x6f,
	0x72, 0x4f, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x1a, 0x11, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x67, 0x65,
	0x74, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x1a, 0x0e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x44, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x1a, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61,
	0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x1a, 0x11, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x12,
	0x33, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0d, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12,
	0x0a, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x1a, 0x0b, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x1a, 0x0e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x4f, 0x75, 0x74, 0x42, 0x21, 0x5a, 0x1f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData []byte
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_proto_rawDesc), len(file_service_proto_rawDesc)))
	})
	return file_service_proto_rawDescData
}

var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_service_proto_goTypes = []any{
	(*Doctor)(nil),               // 0: Doctor
	(*RegisterDoctorIn)(nil),     // 1: RegisterDoctorIn
	(*GetDoctorIn)(nil),          // 2: GetDoctorIn
	(*GetDoctorOut)(nil),         // 3: GetDoctorOut
	(*UpdateDoctorIn)(nil),       // 4: UpdateDoctorIn
	(*UpdateDoctorOut)(nil),      // 5: UpdateDoctorOut
	(*Patient)(nil),              // 6: Patient
	(*CreatePatientIn)(nil),      // 7: CreatePatientIn
	(*CreatePatientOut)(nil),     // 8: CreatePatientOut
	(*GetPatientIn)(nil),         // 9: GetPatientIn
	(*GetPatientOut)(nil),        // 10: GetPatientOut
	(*GetDoctorPatientsIn)(nil),  // 11: GetDoctorPatientsIn
	(*GetDoctorPatientsOut)(nil), // 12: GetDoctorPatientsOut
	(*UpdatePatientIn)(nil),      // 13: UpdatePatientIn
	(*UpdatePatientOut)(nil),     // 14: UpdatePatientOut
	(*Card)(nil),                 // 15: Card
	(*CreateCardIn)(nil),         // 16: CreateCardIn
	(*GetCardIn)(nil),            // 17: GetCardIn
	(*GetCardOut)(nil),           // 18: GetCardOut
	(*CreateCardOut)(nil),        // 19: CreateCardOut
	(*UpdateCardIn)(nil),         // 20: UpdateCardIn
	(*UpdateCardOut)(nil),        // 21: UpdateCardOut
	(*timestamp.Timestamp)(nil),  // 22: google.protobuf.Timestamp
	(*empty.Empty)(nil),          // 23: google.protobuf.Empty
}
var file_service_proto_depIdxs = []int32{
	0,  // 0: RegisterDoctorIn.doctor:type_name -> Doctor
	0,  // 1: GetDoctorOut.doctor:type_name -> Doctor
	0,  // 2: UpdateDoctorOut.doctor:type_name -> Doctor
	22, // 3: Patient.last_uzi_date:type_name -> google.protobuf.Timestamp
	22, // 4: Patient.birthdate:type_name -> google.protobuf.Timestamp
	22, // 5: CreatePatientIn.birthdate:type_name -> google.protobuf.Timestamp
	6,  // 6: GetPatientOut.patient:type_name -> Patient
	6,  // 7: GetDoctorPatientsOut.patients:type_name -> Patient
	22, // 8: UpdatePatientIn.last_uzi_date:type_name -> google.protobuf.Timestamp
	22, // 9: UpdatePatientIn.birthdate:type_name -> google.protobuf.Timestamp
	6,  // 10: UpdatePatientOut.patient:type_name -> Patient
	15, // 11: CreateCardIn.card:type_name -> Card
	15, // 12: GetCardOut.Card:type_name -> Card
	15, // 13: CreateCardOut.card:type_name -> Card
	15, // 14: UpdateCardIn.card:type_name -> Card
	15, // 15: UpdateCardOut.card:type_name -> Card
	1,  // 16: MedSrv.registerDoctor:input_type -> RegisterDoctorIn
	2,  // 17: MedSrv.getDoctor:input_type -> GetDoctorIn
	4,  // 18: MedSrv.updateDoctor:input_type -> UpdateDoctorIn
	7,  // 19: MedSrv.createPatient:input_type -> CreatePatientIn
	9,  // 20: MedSrv.getPatient:input_type -> GetPatientIn
	11, // 21: MedSrv.getDoctorPatients:input_type -> GetDoctorPatientsIn
	13, // 22: MedSrv.updatePatient:input_type -> UpdatePatientIn
	16, // 23: MedSrv.createCard:input_type -> CreateCardIn
	17, // 24: MedSrv.getCard:input_type -> GetCardIn
	20, // 25: MedSrv.updateCard:input_type -> UpdateCardIn
	23, // 26: MedSrv.registerDoctor:output_type -> google.protobuf.Empty
	3,  // 27: MedSrv.getDoctor:output_type -> GetDoctorOut
	5,  // 28: MedSrv.updateDoctor:output_type -> UpdateDoctorOut
	8,  // 29: MedSrv.createPatient:output_type -> CreatePatientOut
	10, // 30: MedSrv.getPatient:output_type -> GetPatientOut
	12, // 31: MedSrv.getDoctorPatients:output_type -> GetDoctorPatientsOut
	14, // 32: MedSrv.updatePatient:output_type -> UpdatePatientOut
	23, // 33: MedSrv.createCard:output_type -> google.protobuf.Empty
	18, // 34: MedSrv.getCard:output_type -> GetCardOut
	21, // 35: MedSrv.updateCard:output_type -> UpdateCardOut
	26, // [26:36] is the sub-list for method output_type
	16, // [16:26] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	file_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_service_proto_msgTypes[4].OneofWrappers = []any{}
	file_service_proto_msgTypes[6].OneofWrappers = []any{}
	file_service_proto_msgTypes[7].OneofWrappers = []any{}
	file_service_proto_msgTypes[13].OneofWrappers = []any{}
	file_service_proto_msgTypes[15].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_proto_rawDesc), len(file_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}
